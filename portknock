#!/bin/bash

# Port Knocker
#
# 1 - Put this code in ~/.bashrc.d/portknock
# 2 - source that path in your .bashrc or .bash_profile
# 3 - Create a ~/.portknock directory and one or more files in it with
#     entries like:
# host_regexp port1,port2,...,portN
#     (lines with # are ignored)
# ...
# 4 - You must open a new terminal session to use the new function
# 5 - Use it as you would use the ssh command
#     ssh user@server => pssh user@server
#   - or with psshproxy as a ProxyCommand in .ssh/config
#     ProxyCommand psshproxy %h %p
#
# It accepts the usual options of the SSH program

PORTKNOCKDIR=~/.portknock

portknock() {
  HOST=$1

  old_IFS=$IFS
  IFS=$'\n'
  for line in `cat $PORTKNOCKDIR/*`
  do
    first=`echo $line | cut -c1`
    if test x$first == x#
    then
      continue
    fi

    regexp=`echo $line | cut -d' ' -f1`
    ports=`echo $line | cut -d' ' -f2`

    echo $HOST | grep -E $regexp > /dev/null 2>&1
    if test $? == 0
    then
      IFS=' '
      for port in `echo $ports | cut -d, -f1- --output-delimiter=' '`
      do
        nc -w 1 $HOST $port
      done
      IFS=$old_IFS
      return 0
    fi
  done

  echo "ERROR: please specify a port knock sequence for $HOST in $PORTKNOCKDIR"
  return 1
}

pssh() {
  while getopts "1246ab:c:e:fgi:kl:m:no:p:qstvxACD:F:I:KL:MNO:PR:S:TVw:W:XYy" FLAG
  do
    true
  done

  HOST=${@:$OPTIND:1}
  HOST=${HOST#*@}

  portknock $HOST || return
  ssh $*
}

pscp() {
  while getopts "dfl:prtvBCc:i:P:q1246S:o:F:" FLAG
  do
    true
  done

  j=$OPTIND
  while [ ${@:$j:1} ]
  do
    # FIXME: this lets through args without :
    HOST=${@:$j:1}
    HOST=${HOST#*@}
    HOST=${HOST%:*}
    if [ "$HOST" != "." ] && [ "$HOST" != ".." ]
    then
      HOSTS="${HOSTS}${HOST}\n"
    fi
    ((j++))
  done

echo -e $HOSTS | sort -u | \
  while read HOST
  do
    if [ ! -e $HOST ]
    then
      portknock $HOST || return 1
    fi
  done

  scp $*
}
